//def envScript = file("gradle/$env.gradle")
//if (!envScript.exists()) {
//	  throw new GradleException("Unknown environment: $env")
//}
//apply from: envScript

/*
	gradle 主文件
	部分内容参考： https://gist.github.com/dirkraft/8230302
 */
import java.text.SimpleDateFormat
import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.java.archives.internal.DefaultManifest
import org.gradle.api.internal.file.IdentityFileResolver

def defaultManifest(proj) {
    def manifest = new DefaultManifest(new IdentityFileResolver())

    def buildTimeAndDate = new Date()
    def buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    def buildTime = new SimpleDateFormat('HH:mm').format(buildTimeAndDate)

    def git_cmd = "git rev-parse HEAD"
    def git_proc = git_cmd.execute()

    manifest.attributes 'SCM-Revision': git_proc.text.trim()

    manifest.attributes 'Built-By': System.properties['user.name']
    manifest.attributes 'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.getProperty("java.vm.version") + ")"
    manifest.attributes 'Build-Host': InetAddress.localHost.hostName
    manifest.attributes 'Build-Date': buildDate
    manifest.attributes 'Build-Time': buildTime
    manifest.attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
    manifest.attributes 'Specification-Title': proj.archivesBaseName
    manifest.attributes 'Specification-Version': proj.version == null ? 0 : proj.version
    manifest.attributes 'Specification-Vendor': project_group
    manifest.attributes 'Implementation-Title': proj.archivesBaseName
    manifest.attributes 'Implementation-Version': proj.version == null ? 0 : proj.version
    manifest.attributes 'Implementation-Vendor': project_group
    manifest.attributes 'provider': 'gradle'

    return manifest
}

def defaultProperty(propertyName, defaultValue) {
    return hasProperty(propertyName) ? project[propertyName] : defaultValue
}

project.ext.env = defaultProperty('env', 'dev')

/**
 * 用于执行 grunt 任务
 *
 * 来自:
 * http://blog.crisp.se/2013/04/30/yassalsundman/test-driving-javascript-grunt-with-gradle
 */
class GruntTask extends Exec {
    private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "grunt.cmd" : "grunt"
    def gruntArgs = ""

    public GruntTask() {
        super()
        this.setExecutable(gruntExecutable)
    }

    public void setGruntArgs(String gruntArgs) {
        this.args = "$gruntArgs".trim().split(" ") as List
    }
}

println "*****************************"
println " PROJECT = " + project.name + " "
println " PROJECT ENV = " + project.ext.env + " "
println "*****************************"

apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'

buildscript {

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "http://download.java.net/maven/2"
        }
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.2'
    }

}

apply from: 'dependency.gradle'

//////////////////////////////////////
// settings
ext {
    // Project constants
    github_org = 'organization'
    project_group = 'me.zhaoyang'
    project_name = 'project-template'
    //project_version = '0.0.1-SNAPSHOT'
    project_description = 'Template for Java, Maven, and IntelliJ with minimum POM requirements for Maven central.'

    project_jdk = '1.8'
    project_web = '3.0'


    /*
     * Fine tune the POM contents here, particularly, the developers section. Some defaulting behavior is provided
     * for all other fields based on project constants.
    project_pom = {
        name project_name
        description project_description
        url "https://github.com/${github_org}/${project_name}"
        licenses {
            license {
                name 'MIT License'
                url 'http://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }
        scm {
            url "https://github.com/${github_org}/${project_name}.git"
            connection "scm:git:https://github.com/${github_org}/${project_name}.git"
            developerConnection "scm:git:git@github.com:${github_org}/${project_name}.git"
        }
        organization {
            name github_org
            url "https://github.com/${github_org}"
        }
        developers {
            developer {
                id 'developer'
                name 'developer'
            }
        }
    }*/

    /** 生成 manifest 的方法，在打 jar 包或者 war 包时候调用 */
    defaultManifest = this.&defaultManifest

    /** Used where gradle task evaluation would fail because of an undefined value, even if the task wasn't targeted. */
    defaultBlank = { closure ->
        try {
            closure()
        } catch (MissingPropertyException e) {
            ''
        }
    }

    /**
     * 子项目中调用，用于生成编译数字，此数字可以作为版本号的一个组成部分。
     *
     * 存储位置为子项目下的 build_number.properties,此文件与子项目的 build.gradle 平级
     */
    buildNumberIncrease = { path ->
        def _build_number_file = new File(path.toString() + "/build_number.properties")
        def buildNumber = _build_number_file.text.toInteger()

        println '-- Old build number: ' + _build_number_file.text
        buildNumber++
        println '-- New build number: ' + buildNumber

        _build_number_file.text = buildNumber

        return buildNumber

    }
}

subprojects { subproj ->


    //group = project_group
    // 这儿置为空值，否则 idea 生成的依赖包命名以此值开始
    // 与 gradle 的打包规则有冲突
    group = ""

    apply plugin: 'java'
    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    ext {
        env = defaultProperty('env', 'dev')
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "http://mvnrepository.com"
        }
    }

    jar {
//        excludes = ['**/rebel.xml']

        doFirst {
            // 生成jar 包的时候按此规则生成 manifest 文件
            manifest = defaultManifest({subproj})
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
        doFirst {
            manifest = defaultManifest({subproj})
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        doFirst {
            manifest = defaultManifest({subproj})
        }
    }

    // 编码改为 UTF-8, 否则编译源码的时候会出错
    // 当然，这个需要根据自己的 java 源码的编码进行调整
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    //
    artifacts {
        archives jar
        // archives javadocJar
        archives sourcesJar
    }

    //
    // 执行 grunt 编译 js/less 等
    //
    task grunt(type: GruntTask) {
        gruntArgs = "default"
        // commandLine 'grunt.cmd', 'default'
    }

    configurations {

//        deployerJars

        //
        // 所有需要忽略的包定义在此
        //
//        all*.exclude group: 'commons-httpclient'
//        all*.exclude group: 'commons-logging'
//        all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }

    dependencies {
        // 用于上传自己项目的jar 包到中心 maven 库
//        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"


        //
        // 通用依赖
        //
        compile (
                libraries.'log4j',
                libraries.'slf4j-log4j12',
                libraries.'slf4j-api',

                libraries.'jackson-core-asl',
                libraries.'jackson-mapper-asl',
                libraries.'jackson-jaxrs',
                libraries.'jackson-databind',
                libraries.'spring-core',
                libraries.'spring-web',
                libraries.'spring-webmvc',
                libraries.'spring-tx',
                libraries.'spring-jdbc',
                libraries.'spring-oxm',
                libraries.'spring-beans',
                libraries.'spring-context',
                libraries.'spring-context-support',
                libraries.'spring-aop',
//                libraries.'dom4j',
//                libraries.'jaxen',
        )
        /** 移除某些包防止冲突 */
        compile (
                libraries.'spring-core',
        ) {
//            exclude module: "commons-lang"
            exclude module: "commons-logging"
        }
        compile (
                libraries.'dom4j',
        ) {
            exclude module: "xml-apis"
        }
        compile (
                libraries.'jaxen',
        ) {
            exclude module: "jdom"
            exclude module: "xercesImpl"
            exclude module: "xom"
            exclude module: "xmlParserAPIs"
            exclude module: "xalan"
            exclude module: "icu4j"
            exclude module: "xml-apis"
        }

        //
        // 引入根目录和各子项目下的libs中的jar包
        //
        ext.jarTree = fileTree(dir: 'lib', include: '**/*.jar')
        ext.rootProjectLibs = new File(rootProject.rootDir, 'lib').getAbsolutePath()
        ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')

        compile jarTree

        //
        // 测试依赖
        //
        testCompile (
                libraries.'junit',
                libraries.'spring-test',
                libraries.'assertj'
        )
    }

//    // 上传 jar 包到自己的 maven 服务器
//    //
//    uploadArchives {
//
//        repositories.mavenDeployer {
//            //beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//            configuration = configurations.deployerJars
//            repository(
//                    // 这儿需要注意，后面的地址是服务器地址，需要写全，是个大坑啊
//                    // 另外初次执行的时候最好带上 --info 参数，会提示保存 ssh 验证信息的
//                    // 这时候需要输入 yes
//                    //
//                    // 更详细说明参见我的 blog: http://my.oschina.net/someok/blog/374562
//                    url: //"file://d:/Develop/MyProjects/repos/"
//                            "scp://repos.example.com:22/home/maven/repos/release"
//            )
//                    {
//                        // If these are not defined assemble needlessly fails for unrelated tasks, hence, defaultBlank.
//                        authentication(userName: "maven", password: "maven")
//                    }
//
//        }
//    }

    // 显示当前项目下所有用于 compile 的 jar.
    //
    task listJars(description: 'Display all compile jars.') << {
        configurations.compile.each { File file -> println file.name }
    }

}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Misc

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

// 在idea 的 module 中忽略 projects 目录
// project("projects") {
//    ideaModule.enabled = false
// }


/**
* idea 里面忽略根项目，也就是说不将根项目设置为 module
*/
//gradle.projectsEvaluated {
//    gradle.rootProject {
//        ideaModule.enabled = false
//        idea {
//            project {
//                // modules = subprojects*.idea.module
//                // 如果某个子项目的 ideaModule 设置为 false，则不会在 idea 中生成 module
//                def modulesToInclude = subprojects.findAll {it.ideaModule.enabled == true}
//                modules = modulesToInclude.idea.module
//            }
//        }
//    }
//}

idea {
    module {
        downloadSources = true
    }
    project {
        jdkName = project_jdk
        languageLevel = project_jdk
        vcs = 'Git'
    }
}

allprojects {

}

